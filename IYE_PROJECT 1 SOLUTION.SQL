--  SQL PROJECT 1 FOR OJOMA BLESSING IYE
-- . Retrieve all columns from the `products` table.
SELECT *
FROM PRODUCT;

-- . Retrieve only the `product_id` and `Product` columns from the `products` table. 
SELECT product_id, Product
FROM PRODUCT;

-- Retrieve the `Customer name` and `city` from the `customers` table.
SELECT *
FROM CUSTOMER;
 
SELECT Customer_name,city
from CUSTOMER;

-- Write a query to display all columns from the `orders` table.
SELECT *
FROM ORDERS;

-- . Display the `order_id`, `order_date`, and `total_amount` from the `orders` table.
SELECT order_id, order_date, total_amount
FROM ORDERS;

 -- Retrieve all products from the `products` table where the `price` is greater than 500. 
 SELECT Product, price
 from PRODUCT
 WHERE PRICE > 500;
 
 
 
 
-- Find all customers from the `customers` table who live in "Houston". 
SELECT Customer_id, Customer_name, city
FROM CUSTOMER
where city like '%Houston%';

-- Retrieve all orders from the `orders` table where the `total_amount` is less than 1000. 
select order_id, total_amount
from ORDERS
where total_amount < 1000;



-- Find all products in the `products` table that belong to the "Electronics" category. 
SELECT product_id, Category
FROM PRODUCT
where category like '%electronics%';


-- Group By and Order By 
-- Count the number of products in each category from the `products` table and group the results by 
-- `Category`. 
select Category, count(product)
from PRODUCT
GROUP BY Category; 

-- Retrieve the total number of orders placed by each customer from the `orders` table, grouped by 
-- `customer_id`. 
select customer_id, count(order_id)
from orders
group by customer_id;


-- Display the average `price` of products in each category, sorted by the average price in descending 
-- order.
select Category, avg(price)
from PRODUCT
group by Category
order by avg(price) desc;

--  Find the total `quantity` of each product sold from the `order_items` table, grouped by `product_id`. 
-- Using Having vs. Where Statement 
select product_id, sum(quantity)
from order_limited
group by product_id;

-- 

-- 14. Retrieve categories from the `products` table where the average price is greater than 500 (use 
-- `GROUP BY` and `HAVING`). 
select Category, avg(price)
from product
group by Category
having avg(price) > 500;


-- 15. Find customers from the `customers` table who are in the "Young" age bracket (use `WHERE`). 
SELECT Customer_name, Age_Bracket
FROM CUSTOMER
WHERE Age_Bracket like 'Young';

-- 16. Retrieve products from the `products` table where the price is greater than 300 and the category is 
-- "Accessories" (use `WHERE`). 
SELECT product_id, Category, price
FROM PRODUCT
WHERE Category like 'Accessories' and price > 300;


-- Display categories from the `products` table that have more than 5 products (use `GROUP BY` and `HAVING`) 
select Category, count(product)
from product
group by Category
having count(product) > 5;



-- Limit and Aliasing 
-- PROJECT 1 
-- 18. Retrieve the top 5 most expensive products from the `products` table (use `LIMIT`). 
select product, price
from product
order by price desc
limit 5;

-- 19. Display the first 10 orders from the `orders` table, sorted by `order_date` in ascending order. 
select order_id, order_date
from orders
order by order_date asc
limit 10;

-- 20. Retrieve the `product_id` and `Product` from the `products` table, and alias them as `ID` and `Product Name`.
select product_id as ID, Product as ProductName
from product;

 
-- 21. Find the top 3 customers with the highest `total_amount` spent from the `orders` table. 
select total_amount
from orders
order by total_amount desc
limit 3;

-- Joins in MySQL 
-- 22. Retrieve the `order_id`, `order_date`, and `Customer name` by joining the `orders` and `customers` tables. 
select c.Customer_name, o.order_date, o.order_id
from CUSTOMER c
inner join orders o 
on
c.customer_id = o.customer_id;

select *
from order_limited;

-- 23. Display the `product_id`, `Product`, and `quantity` sold by joining the `products` and `order_items` tables. 
select p.product_id, P.Product, O.quantity
from product P
inner join order_limited o
on
p.product_id = o.product_id;

 

--24. Find the total revenue generated by each product by joining the `products` and `order_items` tables. 
SELECT p.product, p.price * o.quantity revenue
from products p
inner join order_items o
on
p.product_id = o.product_id;


-- 25. Retrieve the `Customer name`, `order_date`, and `total_amount` by joining the `customers` and 
-- `orders` tables. 
select c.customer_name, o.order_date, o.total_amount
from customer c
inner join orders o
on c.customer_id=o.Customer_id;
-- Unions in MySQL 
-- 26. Retrieve a list of all unique cities from the `customers` table and combine it with a list of all unique 
-- categories from the `products` table (use `UNION`).
select city
from customer
union
select category
from product;
-- 27. Combine the `product_id` from the `products` table with the `order_id` from the `orders` table (use 
-- `UNION`). 
select product_id
from products
union
select order_id
from orders;
-- Case Statements 
-- 28. Create a new column in the `products` table called `Price Range` that categorizes products as "Low" 
-- (price < 300), "Medium" (price between 300 and 700), and "High" (price > 700) using a `CASE` statement.
alter table product
add column Price_Range text;
update product
set price_range =
case when price < 300 then 'Low'
when price between 300 and 700 then 'Medium'
when price > 700 then 'High'
end;
select *
from product;
-- 29. Use a `CASE` statement to categorize customers in the `customers` table as "Young" (age <= 33), 
-- "Working Class" (age between 34 and 49), and "Retired" (age >= 50).
select *,
case 
when age < 33 then 'Young'
when age between 34 and 49 then 'Working Class'
when age > 50 then 'Retired'
end as age_category
from customer;
-- 30. Retrieve the `order_id` and a new column called `Order Size` that categorizes orders as "Small" 
-- (total_amount < 500), "Medium" (total_amount between 500 and 1000), and "Large" (total_amount > 
-- 1000) using a `CASE` statement.
alter table orders
add column order_size text;
update orders
set order_size = 
case
when total_amount < 500 then 'Small'
when total_amount between 500 and 1000 then 'Medium'
when total_amount > 1000 then 'Large'
end;
select *
from orders;

-- Intermediate Challenges 
-- PROJECT 1 
-- 31. Find the top 5 customers who have spent the most money in total (join `customers` and `orders` 
-- tables). 
select c.customer_id, c.customer_name, o.total_amount
from customer c
inner join orders o
on c.customer_id=o.customer_id
order by total_amount desc
limit 5;
-- 32. Retrieve the `Product` name, `Category`, and total revenue generated by each product (join 
-- `products` and `order_items` tables).
select p.product, p.category, oi.quantity*oi.unit_price Revenue
from product p
inner join order_limited oi
on p.product_id=oi.product_id;

-- 33. Display the `Customer name`, `order_date`, and `total_amount` for orders placed in January 2023 
-- (use `WHERE` with date filtering).
select c.customer_name, o.order_date, o.total_amount
from customer c
inner join orders o
on c.Customer_id=o.Customer_id
where order_date between '1/1/2023' and '1/31/2023';

-- 34. Find the average `total_amount` of orders for each customer, and display only those customers 
-- whose average order amount is greater than 1000 (use `GROUP BY` and `HAVING`).
select customer_id, avg(total_amount)
from orders
group by customer_id
having avg(total_amount) > 1000;
-- 35. Retrieve the `Customer name`, `Product`, and `quantity` for all orders placed by customers in "New 
-- York" (join `customers`, `orders`, and `order_items` tables).
select c.customer_name, p.product, oi.quantity, c.city
from customer c
inner join orders o
on c.customer_id=o.customer_id
inner join order_limited oi
on o.order_id=oi.order_id
inner join product p
on p.product_id=oi.order_id;
-- 36. Find customers who placed orders in both January and February 2023.
select customer_id, order_date
from orders
where order_date between '1/1/2023' and '1/31/2023';